{"ast":null,"code":"import { env } from '../env.js';\nimport { apiConfig } from '../apiConfig.js';\nexport async function searchMovie(search_data) {\n  try {\n    console.log('search_data: ' + search_data);\n    const response = await fetch(apiConfig[env].API_URL + '/api/movie/search?search_text=' + search_data, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${apiConfig[env].bearer_token}`\n      }\n    });\n    return await response.json(); //***\n\n    // console.log('Search Movie response: ' + await response);\n  } catch (error) {\n    return [];\n  }\n}\nexport async function getAllMovies() {\n  try {\n    console.log('env myConfig: ' + env);\n    console.log('apiConfig.bearer_token: ' + apiConfig[env].bearer_token);\n    console.log('apiConfig.API_URL: ' + apiConfig[env].API_URL);\n\n    //const response = await fetch('http://localhost:4000/api/movie/all',\n    const response = await fetch(apiConfig[env].API_URL + '/api/movie/all', {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${apiConfig[env].bearer_token}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    return [];\n  }\n}\nexport async function createMovie(data) {\n  try {\n    const response = await fetch(apiConfig[env].API_URL + '/api/movie/insert', {\n      //mode: 'no-cors',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiConfig[env].bearer_token}`\n      },\n      body: JSON.stringify(data)\n    });\n    console.log('Create Movie response: ' + (await response));\n\n    // return  response.json();\n    return response;\n  } catch (error) {\n    return [];\n  }\n}","map":{"version":3,"names":["env","apiConfig","searchMovie","search_data","console","log","response","fetch","API_URL","method","headers","Authorization","bearer_token","json","error","getAllMovies","createMovie","data","body","JSON","stringify"],"sources":["/Users/admin/ENGSE203/first-development/my-app/src/services/MovieService.js"],"sourcesContent":["\nimport { env } from '../env.js';\nimport { apiConfig } from '../apiConfig.js';\n\nexport async function searchMovie(search_data) {\n\n    try {\n        console.log('search_data: ' + search_data);\n        const response = await fetch(apiConfig[env].API_URL + '/api/movie/search?search_text=' + search_data,\n            {\n                method: \"GET\",\n                headers: {\n                    Authorization: `Bearer ${apiConfig[env].bearer_token}`,\n                }\n            },);\n\n        return await response.json(); //***\n\n        // console.log('Search Movie response: ' + await response);\n\n    } catch (error) {\n        return [];\n    }\n\n}\n\nexport async function getAllMovies() {\n\n    try {\n\n        console.log('env myConfig: ' + env);\n        console.log('apiConfig.bearer_token: ' + apiConfig[env].bearer_token);\n        console.log('apiConfig.API_URL: ' + apiConfig[env].API_URL);\n\n        //const response = await fetch('http://localhost:4000/api/movie/all',\n        const response = await fetch(apiConfig[env].API_URL + '/api/movie/all',\n            {\n                method: \"GET\",\n                headers: {\n                    Authorization: `Bearer ${apiConfig[env].bearer_token}`,\n                }\n            },);\n        return await response.json();\n\n    } catch (error) {\n        return [];\n    }\n\n}\n\nexport async function createMovie(data) {\n    try {\n\n        const response = await fetch(apiConfig[env].API_URL + '/api/movie/insert', {\n            //mode: 'no-cors',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${apiConfig[env].bearer_token}`,\n            },\n            body: JSON.stringify(data)\n\n        })\n        console.log('Create Movie response: ' + await response);\n\n        // return  response.json();\n        return response;\n        \n    } catch (error) {\n        return [];\n    }\n}"],"mappings":"AACA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,OAAO,eAAeC,WAAWA,CAACC,WAAW,EAAE;EAE3C,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGF,WAAW,CAAC;IAC1C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACN,SAAS,CAACD,GAAG,CAAC,CAACQ,OAAO,GAAG,gCAAgC,GAAGL,WAAW,EAChG;MACIM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASV,SAAS,CAACD,GAAG,CAAC,CAACY,YAAa;MACzD;IACJ,CAAE,CAAC;IAEP,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE9B;EAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO,EAAE;EACb;AAEJ;AAEA,OAAO,eAAeC,YAAYA,CAAA,EAAG;EAEjC,IAAI;IAEAX,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGL,GAAG,CAAC;IACnCI,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGJ,SAAS,CAACD,GAAG,CAAC,CAACY,YAAY,CAAC;IACrER,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGJ,SAAS,CAACD,GAAG,CAAC,CAACQ,OAAO,CAAC;;IAE3D;IACA,MAAMF,QAAQ,GAAG,MAAMC,KAAK,CAACN,SAAS,CAACD,GAAG,CAAC,CAACQ,OAAO,GAAG,gBAAgB,EAClE;MACIC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASV,SAAS,CAACD,GAAG,CAAC,CAACY,YAAa;MACzD;IACJ,CAAE,CAAC;IACP,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO,EAAE;EACb;AAEJ;AAEA,OAAO,eAAeE,WAAWA,CAACC,IAAI,EAAE;EACpC,IAAI;IAEA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACN,SAAS,CAACD,GAAG,CAAC,CAACQ,OAAO,GAAG,mBAAmB,EAAE;MACvE;MACAC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASV,SAAS,CAACD,GAAG,CAAC,CAACY,YAAa;MACzD,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;IAE7B,CAAC,CAAC;IACFb,OAAO,CAACC,GAAG,CAAC,yBAAyB,IAAG,MAAMC,QAAQ,EAAC;;IAEvD;IACA,OAAOA,QAAQ;EAEnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZ,OAAO,EAAE;EACb;AACJ"},"metadata":{},"sourceType":"module"}