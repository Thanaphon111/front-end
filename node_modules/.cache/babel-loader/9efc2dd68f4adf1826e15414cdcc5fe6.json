{"ast":null,"code":"export async function getAllMovies() {\n  try {\n    const response = await fetch('http://localhost:3001/api/movie/all');\n    return await response.json();\n  } catch (error) {\n    return [];\n  }\n}\nexport async function createMovie(data) {\n  const response = await fetch(`http://localhost:4000const hapi = require(\"@hapi/hapi\");\nconst env = require(\"./env.js\");\nconst Movies = require(\"./respository/movie\");\nconst AuthBearer = require(\"hapi-auth-bearer-token\"); //-------- AuthBearer -------\nconst express = require(\"express\");\nconst app = express();\nconst path = require(\"path\");\nbodyParser = require(\"body-parser\");\n//------------------\nconst api_port = 4000;\nconst web_port = 4001;\n//------------ hapi --------------\nconsole.log(\"Running Environment: \" + env);\nconst init = async () => {\n const server = hapi.Server({\n   port: api_port,\n   host: \"0.0.0.0\",\n   routes: {\n      \"cors\": true,\n      //cors: {\n      //  origin: [\"Access-Control-Allow-Origin\", \"https://api.se-rmutl.net/\"],\n      //  headers: [\"Accept\", \"Content-Type\"],\n    //    additionalHeaders: [\"X-Requested-With\"],\n    //  },\n   },\n });\n //---------\n await server.register(require(\"@hapi/inert\"));\n //-------- AuthBearer -------\n await server.register(AuthBearer);\n server.auth.strategy(\"simple\", \"bearer-access-token\", {\n   allowQueryToken: true, // optional, false by default\n   validate: async (request, token, h) => {\n     // here is where you validate your token\n     // comparing with token from your database for example\n     const isValid = token === \"1234567890\";\n     const credentials = { token };\n     const artifacts = { test: \"info\" };\n     return { isValid, credentials, artifacts };\n   },\n });\n server.auth.default(\"simple\");\n //-------- AuthBearer -------\n /*\n   server.route({\n       method: \"GET\",\n       path: \"/\",\n       config: {\n           cors: {\n               origin: ['*'],\n               additionalHeaders: ['cache-control', 'x-requested-width']\n           }\n       },\n       handler: () => {\n           return '<h3> Welcome to API Back-end Ver. 1.0.0</h3>';\n       }\n   });\n*/\n server.route({\n   method: \"GET\",\n   path: \"/\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: () => {\n     return \"<h3> Welcome to API Back-end Ver. 1.0.0</h3>\";\n   },\n });\n //API: http://localhost:3001/api/movie/all\n server.route({\n   method: \"GET\",\n   path: \"/api/movie/all\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     //var param = request.query;\n     //const category_code = param.category_code;\n     try {\n       const responsedata = await Movies.MovieRepo.getMovieList();\n       if (responsedata.error) {\n         return responsedata.errMessage;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n server.route({\n   method: \"GET\",\n   path: \"/api/movie/search\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     var param = request.query;\n     let search_text = param.search_text;\n     //const title = param.title;\n     console.log(\"search_text: \" + search_text);\n     if (search_text === undefined) {\n       console.log(\"search_text is undefined \");\n       search_text = \"N/A\";\n       console.log(\"search_text: \" + search_text);\n     }\n     //if (typeof myVar !== 'undefined')\n     //myVar === undefined\n     try {\n       const responsedata = await Movies.MovieRepo.getMovieSearch(search_text);\n       if (responsedata.error) {\n         return responsedata.errMessage;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n server.route({\n   method: \"POST\",\n   path: \"/api/movie/insert\",\n   config: {\n     payload: {\n       multipart: true,\n     },\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     const { title, genre, director, release_year } = request.payload;\n     console.log(\"request.payload: \" + JSON.stringify(request.payload));\n     /*\n                       const myObj = JSON.parse(request.payload);\n                       const title = myObj.title;\n                       const genre = myObj.genre;\n                       const director = myObj.director;\n                       const release_year = myObj.release_year;\n            */\n     //console.log(\"myObj.title: \"+ myObj.title);\n     try {\n       const responsedata = await Movies.MovieRepo.postMovie(\n         title,\n         genre,\n         director,\n         release_year\n       );\n       if (responsedata.error) {\n         return responsedata;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n await server.start();\n console.log(\"API Server running on %s\", server.info.uri);\n //---------\n};\nprocess.on(\"unhandledRejection\", (err) => {\n console.log(err);\n process.exit(1);\n});\ninit();\n/api/movie/insert`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ...data\n    })\n  });\n  return await response.json();\n}","map":{"version":3,"names":["getAllMovies","response","fetch","json","error","createMovie","data","method","headers","body","JSON","stringify"],"sources":["/Users/admin/ENGSE203/first-development/my-app/src/services/MovieService.js"],"sourcesContent":["export async function getAllMovies() {\n\n    try{\n        const response = await fetch('http://localhost:3001/api/movie/all');\n       \n        return await response.json();\n    }catch(error) {\n        return [];\n    }\n    \n}\n\nexport async function createMovie(data) {\n    const response = await fetch(`http://localhost:4000const hapi = require(\"@hapi/hapi\");\nconst env = require(\"./env.js\");\nconst Movies = require(\"./respository/movie\");\nconst AuthBearer = require(\"hapi-auth-bearer-token\"); //-------- AuthBearer -------\nconst express = require(\"express\");\nconst app = express();\nconst path = require(\"path\");\nbodyParser = require(\"body-parser\");\n//------------------\nconst api_port = 4000;\nconst web_port = 4001;\n//------------ hapi --------------\nconsole.log(\"Running Environment: \" + env);\nconst init = async () => {\n const server = hapi.Server({\n   port: api_port,\n   host: \"0.0.0.0\",\n   routes: {\n      \"cors\": true,\n      //cors: {\n      //  origin: [\"Access-Control-Allow-Origin\", \"https://api.se-rmutl.net/\"],\n      //  headers: [\"Accept\", \"Content-Type\"],\n    //    additionalHeaders: [\"X-Requested-With\"],\n    //  },\n   },\n });\n //---------\n await server.register(require(\"@hapi/inert\"));\n //-------- AuthBearer -------\n await server.register(AuthBearer);\n server.auth.strategy(\"simple\", \"bearer-access-token\", {\n   allowQueryToken: true, // optional, false by default\n   validate: async (request, token, h) => {\n     // here is where you validate your token\n     // comparing with token from your database for example\n     const isValid = token === \"1234567890\";\n     const credentials = { token };\n     const artifacts = { test: \"info\" };\n     return { isValid, credentials, artifacts };\n   },\n });\n server.auth.default(\"simple\");\n //-------- AuthBearer -------\n /*\n   server.route({\n       method: \"GET\",\n       path: \"/\",\n       config: {\n           cors: {\n               origin: ['*'],\n               additionalHeaders: ['cache-control', 'x-requested-width']\n           }\n       },\n       handler: () => {\n           return '<h3> Welcome to API Back-end Ver. 1.0.0</h3>';\n       }\n   });\n*/\n server.route({\n   method: \"GET\",\n   path: \"/\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: () => {\n     return \"<h3> Welcome to API Back-end Ver. 1.0.0</h3>\";\n   },\n });\n //API: http://localhost:3001/api/movie/all\n server.route({\n   method: \"GET\",\n   path: \"/api/movie/all\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     //var param = request.query;\n     //const category_code = param.category_code;\n     try {\n       const responsedata = await Movies.MovieRepo.getMovieList();\n       if (responsedata.error) {\n         return responsedata.errMessage;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n server.route({\n   method: \"GET\",\n   path: \"/api/movie/search\",\n   config: {\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     var param = request.query;\n     let search_text = param.search_text;\n     //const title = param.title;\n     console.log(\"search_text: \" + search_text);\n     if (search_text === undefined) {\n       console.log(\"search_text is undefined \");\n       search_text = \"N/A\";\n       console.log(\"search_text: \" + search_text);\n     }\n     //if (typeof myVar !== 'undefined')\n     //myVar === undefined\n     try {\n       const responsedata = await Movies.MovieRepo.getMovieSearch(search_text);\n       if (responsedata.error) {\n         return responsedata.errMessage;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n server.route({\n   method: \"POST\",\n   path: \"/api/movie/insert\",\n   config: {\n     payload: {\n       multipart: true,\n     },\n     cors: {\n       origin: [\"*\"],\n       additionalHeaders: [\"cache-control\", \"x-requested-width\"],\n       credentials: true,\n     },\n   },\n   handler: async function (request, reply) {\n     const { title, genre, director, release_year } = request.payload;\n     console.log(\"request.payload: \" + JSON.stringify(request.payload));\n     /*\n                       const myObj = JSON.parse(request.payload);\n                       const title = myObj.title;\n                       const genre = myObj.genre;\n                       const director = myObj.director;\n                       const release_year = myObj.release_year;\n            */\n     //console.log(\"myObj.title: \"+ myObj.title);\n     try {\n       const responsedata = await Movies.MovieRepo.postMovie(\n         title,\n         genre,\n         director,\n         release_year\n       );\n       if (responsedata.error) {\n         return responsedata;\n       } else {\n         return responsedata;\n       }\n     } catch (err) {\n       server.log([\"error\", \"home\"], err);\n       return err;\n     }\n   },\n });\n await server.start();\n console.log(\"API Server running on %s\", server.info.uri);\n //---------\n};\nprocess.on(\"unhandledRejection\", (err) => {\n console.log(err);\n process.exit(1);\n});\ninit();\n/api/movie/insert`, {\n        method: 'POST',\n        headers: {'Content-Type':'application/json'},\n        body: JSON.stringify({...data})\n      })\n    return await response.json();\n}"],"mappings":"AAAA,OAAO,eAAeA,YAAYA,CAAA,EAAG;EAEjC,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;IAEnE,OAAO,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAChC,CAAC,QAAMC,KAAK,EAAE;IACV,OAAO,EAAE;EACb;AAEJ;AAEA,OAAO,eAAeC,WAAWA,CAACC,IAAI,EAAE;EACpC,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAE;AAClkBAAkB,EAAE;IACZK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAC,cAAc,EAAC;IAAkB,CAAC;IAC5CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAC,GAAGL;IAAI,CAAC;EAChC,CAAC,CAAC;EACJ,OAAO,MAAML,QAAQ,CAACE,IAAI,CAAC,CAAC;AAChC"},"metadata":{},"sourceType":"module"}